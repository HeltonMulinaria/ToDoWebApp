
trigger:
  branches:
    include:
      - master
      - main
      - develop

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  dotNetVersion: '8.0.x'
  azureSubscription: 'TODO_APP_AZURE_SERVICE_CONNECTION' 
  webAppName: 'todowebapp' 
  resourceGroupName: 'rg-todoapp' 
  location: 'Brazil South' 

stages:
  - stage: Build
    displayName: 'Build and Publish'
    jobs:
      - job: BuildJob
        displayName: 'Build .NET Application'
        steps:
          - task: UseDotNet@2
            displayName: 'Install .NET 8 SDK'
            inputs:
              packageType: 'sdk'
              version: $(dotNetVersion)
              installationPath: $(Agent.ToolsDirectory)/dotnet

          - task: DotNetCoreCLI@2
            displayName: 'Restore NuGet Packages'
            inputs:
              command: 'restore'
              projects: '**/*.csproj'

          - task: DotNetCoreCLI@2
            displayName: 'Build Project'
            inputs:
              command: 'build'
              projects: '**/*.csproj'
              arguments: '--configuration $(buildConfiguration) --no-restore'

          - task: DotNetCoreCLI@2
            displayName: 'Publish Application'
            inputs:
              command: 'publish'
              publishWebProjects: false
              projects: '**/ToDoWebApp.csproj'
              arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) --no-restore'
              zipAfterPublish: true
              modifyOutputPath: false

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Build Artifacts'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'

  - stage: DeployDev
    displayName: 'Deploy to Development'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    jobs:
      - deployment: DeployDevEnvironment
        displayName: 'Deploy to Dev Environment'
        environment: 'Development'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: 'Deploy to Azure App Service (Dev)'
                  inputs:
                    azureSubscription: '$(azureSubscription)'
                    appType: 'webAppLinux'
                    appName: '$(webAppName)-dev'
                    package: '$(Pipeline.Workspace)/drop/*.zip'
                    runtimeStack: 'DOTNETCORE|8.0'
                    startUpCommand: 'dotnet ToDoWebApp.dll'

  - stage: DeployProd
    displayName: 'Deploy to Production'
    dependsOn: Build
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/main')))
    jobs:
      - deployment: DeployProdEnvironment
        displayName: 'Deploy to Production Environment'
        environment: 'Production'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: 'Deploy to Azure App Service (Prod)'
                  inputs:
                    azureSubscription: '$(azureSubscription)'
                    appType: 'webAppLinux'
                    appName: '$(webAppName)'
                    package: '$(Pipeline.Workspace)/drop/*.zip'
                    runtimeStack: 'DOTNETCORE|8.0'
                    deploymentMethod: 'zipDeploy'
                    startUpCommand: 'dotnet ToDoWebApp.dll'